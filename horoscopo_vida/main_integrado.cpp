#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <ctime>
#include <algorithm>
#include <thread>
#include <chrono>
#include <cmath>
#include <iomanip>
#include "astrologia.h"
#include "analisis_ascendente.h"
#include "ascii_art_signos.h" 
#include "colors.h"
using namespace std;

// Definici√≥n de BOLD para texto en negrita en consola
#define BOLD "\033[1m"


map<string, string> frases_por_signo = {
    {"Aries", "üî• La energia que tienes rompe cualquier limite."},
    {"Taurus", "üå± Tu constancia construye futuros solidos."},
    {"Gemini", "üåü Tu curiosidad te lleva por caminos fascinantes."},
    {"Cancer", "üåô Tu sensibilidad es tu mayor fuerza."},
    {"Leo", "‚òÄÔ∏è Naciste para brillar, no lo olvides."},
    {"Virgo", "üìã El orden que traes al mundo es vital."},
    {"Libra", "‚öñÔ∏è Tu equilibrio inspira a otros."},
    {"Scorpio", "ü¶Ç Tu intensidad transforma realidades."},
    {"Sagittarius", "üèπ Tu espiritu libre ilumina nuevos caminos."},
    {"Capricorn", "üèîÔ∏è Tu disciplina logra lo imposible."},
    {"Aquarius", "üíß Tu originalidad cambia el mundo."},
    {"Pisces", "üêü Sue√±as con fuerza y eso te hace imparable."}
};


void contar_vida_restante(int anios) {
    for (int i = anios; i >= 0; --i) {
        cout << "[‚è≥ Te quedan: " << i << " a√±os...]" << endl;
        cout.flush();
        this_thread::sleep_for(chrono::milliseconds(300));
    }
    cout << "[üåü Disfruta cada instante]" << endl;
}

int calcular_esperanza_vida(string sexo) {
    transform(sexo.begin(), sexo.end(), sexo.begin(), ::tolower);
    if (sexo[0] == 'h') return 75;
    if (sexo[0] == 'm') return 81;
    return 78; // Valor por defecto
}


void mostrar_grafico_barras(int edad_actual, int esperanza_total) {
    cout << "\nüìä GR√ÅFICO DE BARRAS - ESPERANZA DE VIDA:\n";
    cout << "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
    
    for (int edad = 0; edad <= 100; edad += 5) {
        int vida_restante = max(esperanza_total - edad, 0);
        cout << "Edad " << setw(2) << edad << ": ";
        
        // Usar diferentes caracteres para diferentes rangos
        char barra = '‚ñà';
        if (vida_restante < 20) barra = '‚ñì';
        else if (vida_restante < 40) barra = '‚ñí';
        
        for (int i = 0; i < vida_restante / 2; ++i) cout << barra;
        
        if (edad == (edad_actual / 5) * 5) {
            cout << MAGENTA << " ‚Üê üë§ Cerca de tu edad" << RESET;
        }
        cout << endl;
    }
}

void mostrar_grafico_pastel(int edad, int restante) {
    int total = edad + restante;
    double por_vivida = (double)edad / total * 100;
    double por_restante = 100 - por_vivida;

    cout << "\nü•ß GR√ÅFICO DE PASTEL - PROPORCI√ìN DE VIDA:\n";
    cout << "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
    cout << "üìà A√±os vividos     : " << GREEN << fixed << setprecision(1) << por_vivida << "% " << RESET;
    
    // Mostrar barras visuales
    int barras_vividas = (int)(por_vivida / 5);
    for (int i = 0; i < barras_vividas; i++) cout << "‚ñ†";
    cout << "\n";
    
    cout << "‚è∞ Esperanza restante: " << RED << fixed << setprecision(1) << por_restante << "% " << RESET;
    int barras_restantes = (int)(por_restante / 5);
    for (int i = 0; i < barras_restantes; i++) cout << "‚ñ°";
    cout << "\n";
}

// -----------------------------
// Funciones auxiliares
// -----------------------------
double obtener_hora_nacimiento() {
    int hora, minuto;
    cout << "‚è∞ Hora de nacimiento (0-23): ";
    cin >> hora;
    cout << "‚è∞ Minutos de nacimiento (0-59): ";
    cin >> minuto;
    
    if (hora < 0 || hora > 23 || minuto < 0 || minuto > 59) {
        cout << "‚ö†Ô∏è Hora invalida, usando 12:00 por defecto.\n";
        return 12.0;
    }
    
    return hora + minuto / 60.0;
}

void obtener_coordenadas(double& lat, double& lon) {
    cout << "üó∫Ô∏è ¬øConoces las coordenadas de tu lugar de nacimiento? (s/n): ";
    char respuesta;
    cin >> respuesta;
    
    if (respuesta == 's' || respuesta == 'S') {
        cout << "üìç Latitud (ej: 4.6097 para Bogot√°): ";
        cin >> lat;
        cout << "üìç Longitud (ej: -74.0817 para Bogot√°): ";
        cin >> lon;
        
        if (!validar_coordenadas(lat, lon)) {
            cout << "‚ö†Ô∏è Coordenadas inv√°lidas, usando Bogot√° por defecto.\n";
            lat = 4.6097;
            lon = -74.0817;
        }
    } else {
        cout << "üèôÔ∏è Usando coordenadas de Bogot√° por defecto.\n";
        lat = 4.6097;
        lon = -74.0817;
    }
}

// -----------------------------
// Funci√≥n mejorada para mostrar resultados astrol√≥gicos
// -----------------------------
void mostrar_resultados_astrologicos(const DateTime& dt, double lat, double lon) {
    try {
        // 1. Convertir a UTC y calcular JD
        double jd = julian_date(dt);

        // 2. Calcular Tiempo Sid√©reo en Greenwich
        double TSG = greenwich_sidereal_time(jd);

        // 3. Calcular casas y ascendente
        vector<Casa> casas;
        string ascendente;
        calcular_casas(TSG, lat, lon, casas, ascendente);

        // 4. Calcular posiciones planetarias
        vector<CelestialBody> planetas;
        calcular_posicion_planetas(jd, planetas);

        // Mostrar resultados 
        cout << "\n‚ú®‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú®\n";
        cout << "üåü          CARTA ASTRAL COMPLETA           üåü\n";
        cout << "‚ú®‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú®\n";
        
        cout << "üìÖ Fecha: " << dt.getYear() << "-" << setfill('0') << setw(2) << dt.getMonth() 
             << "-" << setw(2) << dt.getDay() << " " << fixed << setprecision(2) 
             << dt.getHours() << " horas (UTC" << (dt.toUTC() >= 0 ? "+" : "") << dt.toUTC() << ")\n";
        cout << "üó∫Ô∏è Ubicaci√≥n: Lat " << fixed << setprecision(4) << lat << "¬∞, Lon " << lon << "¬∞\n";
        cout << "üåå D√≠a Juliano: " << fixed << setprecision(2) << jd << "\n";
        
        cout << "\nüåü‚îÄ‚îÄ‚îÄ‚îÄ SIGNOS PRINCIPALES ‚îÄ‚îÄ‚îÄ‚îÄüåü\n";
        
        // Mostrar signo solar 
        string signo_solar = calcular_signo_solar(dt);
        cout << "‚òÄÔ∏è SIGNO SOLAR: " << CYAN << signo_solar << RESET << " (tu esencia)\n";
        ArteSignos::mostrar_arte_signo(signo_solar); // ‚Üê Mostrar arte aqu√≠
        
        cout << "\nüîÆ ASCENDENTE: " << YELLOW << ascendente << RESET << " (como te ven los dem√°s)\n";
        if (ascendente != signo_solar) {
            ArteSignos::mostrar_arte_signo(ascendente); // ‚Üê Mostrar arte del ascendente tambi√©n
        }

        // Mostrar an√°lisis detallado del ascendente
        mostrar_analisis_ascendente(ascendente);

        cout << "\nüè†‚îÄ‚îÄ‚îÄ‚îÄ C√öSPIDES DE CASAS ‚îÄ‚îÄ‚îÄ‚îÄüè†\n";
        for (const auto& casa : casas) {
            cout << "üè† Casa " << setw(2) << casa.numero << ": " 
                 << setw(12) << casa.signo << " (" 
                 << fixed << setprecision(2) << casa.longitude << "¬∞)\n";
        }

        cout << "\nü™ê‚îÄ‚îÄ‚îÄ‚îÄ POSICIONES PLANETARIAS ‚îÄ‚îÄ‚îÄ‚îÄü™ê\n";
        string planetas_emoji[] = {"‚òâ", "‚òΩ", "‚òø", "‚ôÄ", "‚ôÇ", "‚ôÉ", "‚ôÑ", "‚ôÖ", "‚ôÜ", "‚ôá"};
        int emoji_index = 0;
        
        for (const auto& body : planetas) {
            ZodiacInfo info = get_zodiac_info(body.longitude);
            double grado_en_signo = fmod(body.longitude, 30.0);
            
            string emoji = (emoji_index < 10) ? planetas_emoji[emoji_index] : "üåü";
            cout << emoji << " " << setw(10) << body.name << ": " 
                 << setw(12) << info.sign_name << " " 
                 << fixed << setprecision(2) << grado_en_signo << "¬∞\n";
            emoji_index++;
        }
        
    } catch (const exception& e) {
        cout << "‚ùå Error calculando carta astral: " << e.what() << endl;
    }
}

void mostrar_menu() {
    cout << "\n‚ú®‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú®\n";
    cout << "üåü    SISTEMA INTEGRADO DE ASTROLOG√çA Y VIDA    üåü\n";
    cout << "‚ú®‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú®\n";
    cout << "1Ô∏è‚É£  Calcular esperanza de vida y carta astral\n";
    cout << "2Ô∏è‚É£  Solo carta astral\n";
    cout << "3Ô∏è‚É£  Solo esperanza de vida\n";
    cout << "4Ô∏è‚É£  An√°lisis detallado del ascendente\n";
    cout << "5Ô∏è‚É£  üé® Galer√≠a de signos zodiacales\n";  // ‚Üê Nueva opci√≥n
    cout << "6Ô∏è‚É£  Salir\n";
    cout << "‚ú®‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú®\n";
}

void procesar_galeria_signos() {
    cout << "\nüé® Entrando a la galer√≠a de signos zodiacales...\n";
    ArteSignos::mostrar_galeria_signos();
}

void procesar_opcion_completa() {
    try {
        int dia, mes, anio;
        string sexo;
        
        cout << "\nüåü‚îÄ‚îÄ‚îÄ‚îÄ DATOS DE NACIMIENTO ‚îÄ‚îÄ‚îÄ‚îÄüåü\n";
        cout << "üìÖ D√≠a de nacimiento (1-31): ";
        cin >> dia;
        cout << "üìÖ Mes de nacimiento (1-12): ";
        cin >> mes;
        cout << "üìÖ A√±o de nacimiento (ej: 1995): ";
        cin >> anio;
        
        if (!validar_fecha(anio, mes, dia)) {
            cout << "‚ùå Fecha inv√°lida. Intenta nuevamente.\n";
            return;
        }
        
        cout << "üë§ Sexo (Hombre/Mujer): ";
        cin >> sexo;

        // Obtener hora de nacimiento
        double hora_nacimiento = obtener_hora_nacimiento();
        
        // Obtener coordenadas
        double lat, lon;
        obtener_coordenadas(lat, lon);

        // Calcular edad actual
        time_t t = time(0);
        tm* now = localtime(&t);
        int current_year = now->tm_year + 1900;
        int edad = current_year - anio;

        // Calcular esperanza de vida
        int esperanza = calcular_esperanza_vida(sexo);
        int restante = max(esperanza - edad, 0);
        
        // Crear objeto DateTime
        int tz = -5; // Huso horario de Colombia
        DateTime dt(anio, mes, dia, hora_nacimiento, tz);

        // Obtener signos
        string signo_solar = calcular_signo_solar(dt);
        string ascendente = calcular_ascendente(dt, lat, lon);
        string frase = frases_por_signo.count(signo_solar) ? 
                      frases_por_signo[signo_solar] : 
                      "‚ú® Tu signo es √∫nico y especial.";

        // Mostrar resultados de vida con mejor formato
        cout << "\nüí´‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüí´\n";
        cout << "‚è∞        RESULTADOS DE ESPERANZA DE VIDA       ‚è∞\n";
        cout << "üí´‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüí´\n";
        cout << "üë§ Edad actual: " << BLUE << edad << RESET << " a√±os\n";
        cout << "‚òÄÔ∏è " << BOLD << CYAN << "Signo zodiacal (Sol): " << RESET << BG_BLUE << WHITE << signo_solar << RESET << "\n";
        cout << "üîÆ " << BOLD << YELLOW << "Ascendente: " << RESET << BG_MAGENTA << WHITE << ascendente << RESET << "\n";
        cout << "üìä Esperanza de vida total: " << GREEN << esperanza << RESET << " a√±os\n";
        cout << "‚è≥ Vida restante estimada: " << RED << restante << RESET << " a√±os\n";
        cout << "üíñ Frase motivacional: " << frase << "\n";

        // Mostrar arte del signo con animaci√≥n
        ArteSignos::mostrar_arte_animado(signo_solar);

        // Animaci√≥n de cuenta regresiva
        cout << "\n‚è≥ Contando tu vida restante...\n";
        contar_vida_restante(min(restante, 5)); // M√°ximo 5 para no ser muy lenta

        // Mostrar gr√°ficos
        mostrar_grafico_barras(edad, esperanza);
        mostrar_grafico_pastel(edad, restante);

        // Mostrar informaci√≥n astrol√≥gica completa
        mostrar_resultados_astrologicos(dt, lat, lon);

    } catch (const exception& e) {
        cout << "‚ùå Error: " << e.what() << endl;
    } catch (...) {
        cout << "‚ùå Error: entrada inv√°lida.\n";
    }
}

void procesar_solo_astrologia() {
    try {
        int dia, mes, anio;
        
        cout << "\nüåü‚îÄ‚îÄ‚îÄ‚îÄ DATOS PARA CARTA ASTRAL ‚îÄ‚îÄ‚îÄ‚îÄüåü\n";
        cout << "üìÖ D√≠a de nacimiento (1-31): ";
        cin >> dia;
        cout << "üìÖ Mes de nacimiento (1-12): ";
        cin >> mes;
        cout << "üìÖ A√±o de nacimiento (ej: 1995): ";
        cin >> anio;
        
        if (!validar_fecha(anio, mes, dia)) {
            cout << "‚ùå Fecha inv√°lida. Intenta nuevamente.\n";
            return;
        }
        
        double hora_nacimiento = obtener_hora_nacimiento();
        
        double lat, lon;
        obtener_coordenadas(lat, lon);
        
        int tz = -5;
        DateTime dt(anio, mes, dia, hora_nacimiento, tz);
        
        mostrar_resultados_astrologicos(dt, lat, lon);
        
    } catch (...) {
        cout << "‚ùå Error procesando datos astrol√≥gicos.\n";
    }
}

void procesar_solo_esperanza() {
    try {
        int anio;
        string sexo;
        
        cout << "\n‚è∞‚îÄ‚îÄ‚îÄ‚îÄ C√ÅLCULO DE ESPERANZA DE VIDA ‚îÄ‚îÄ‚îÄ‚îÄ‚è∞\n";
        cout << "üìÖ A√±o de nacimiento: ";
        cin >> anio;
        cout << "üë§ Sexo (Hombre/Mujer): ";
        cin >> sexo;
        
        time_t t = time(0);
        tm* now = localtime(&t);
        int current_year = now->tm_year + 1900;
        int edad = current_year - anio;
        
        int esperanza = calcular_esperanza_vida(sexo);
        int restante = max(esperanza - edad, 0);
        
        cout << "\nüë§ Edad actual: " << edad << " a√±os\n";
        cout << "üìä Esperanza de vida total: " << GREEN << esperanza << RESET << " a√±os\n";
        cout << "‚è≥ Vida restante estimada: " << RED << restante << RESET << " a√±os\n";
        
        mostrar_grafico_barras(edad, esperanza);
        mostrar_grafico_pastel(edad, restante);
        
    } catch (...) {
        cout << "‚ùå Error procesando esperanza de vida.\n";
    }
}

void ejecutar_aplicacion() {
    srand(time(0)); // Inicializar semilla para n√∫meros aleatorios
    
    cout << "üåü ¬°Bienvenido al Sistema de Astrolog√≠a y Esperanza de Vida! üåü\n";
    
    while (true) {
        mostrar_menu();
        string opcion;
        cout << "‚ú® Elige una opci√≥n (1-6): ";
        cin >> opcion;


        // A√±adir retraso visual antes de ejecutar la opci√≥n
        std::this_thread::sleep_for(std::chrono::milliseconds(700));
        // Limpiar pantalla antes de mostrar la siguiente acci√≥n
        system("cls");

        if (opcion == "1") {
            procesar_opcion_completa();
        } else if (opcion == "2") {
            procesar_solo_astrologia();
        } else if (opcion == "3") {
            procesar_solo_esperanza();
        } else if (opcion == "4") {
            ejecutar_analisis_ascendente();
        } else if (opcion == "5") {  
            procesar_galeria_signos();
        } else if (opcion == "6") {
            cout << "üåü ¬°Gracias por usar el sistema! Que tengas un buen d√≠a. ‚ú®\n";
            break;
        } else {
            cout << "‚ùå Opci√≥n no v√°lida. Elige entre 1 y 6.\n";
        }
        
        cout << "\n‚è∏Ô∏è Presiona Enter para continuar...";
        cin.ignore();
        cin.get();
    }
}

int main() {
    system("chcp 65001");
    system("color 0F");
    try {
        ejecutar_aplicacion();
    } catch (const exception& e) {
        cout << "üí• Error fatal: " << e.what() << endl;
        return 1;
    }
    return 0;
}